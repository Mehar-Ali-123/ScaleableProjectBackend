import type { Wretch } from 'wretch';
import type { ApiRequestOptions } from './api-client.js';
import type { IdempotencyRequestOptions, SubaccountRequestOptions } from './models/index.js';
type InternalRequestOptions = ApiRequestOptions & IdempotencyRequestOptions & SubaccountRequestOptions & {
    headers?: HeadersInit;
};
/**
 * This class handles creating and sending requests as well as catching common errors
 */
export declare class ApiRequestHandler {
    /** Single instance of axios which uses provided arguments for all requests */
    wretch: Wretch;
    constructor(baseUrl: string, apiKey: string, fetch?: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>);
    makeApiGetRequest: <Response_1>(url: string, requestOptions?: Omit<InternalRequestOptions, 'data'>) => Promise<Awaited<Response_1>>;
    makeApiPostRequest: <Response_1>(url: string, data: unknown | null, requestOptions?: InternalRequestOptions) => Promise<Awaited<Response_1>>;
    makeApiPutRequest: <Response_1>(url: string, data: unknown | null, requestOptions?: InternalRequestOptions) => Promise<Awaited<Response_1>>;
    makeApiDeleteRequest: <Response_1>(url: string, requestOptions?: InternalRequestOptions) => Promise<Awaited<Response_1>>;
    private getHeaders;
}
export {};
//# sourceMappingURL=api-request-handler.d.ts.map