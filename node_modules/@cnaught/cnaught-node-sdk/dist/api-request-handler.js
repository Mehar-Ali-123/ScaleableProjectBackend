/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable indent */
import { CNaughtError } from './models/CNaughtError.js';
import wretch from 'wretch';
import { fromObject } from 'http-problem-details-parser';
import { ProblemDocumentExtension } from 'http-problem-details';
import { invalidParametersProblemType } from './models/CNaughtProblemDetails.js';
import { version } from './version.js';
const mappers = [
    {
        type: invalidParametersProblemType,
        map: (object) => new ProblemDocumentExtension({
            errors: object['errors']
        })
    }
];
/**
 * This class handles creating and sending requests as well as catching common errors
 */
export class ApiRequestHandler {
    /** Single instance of axios which uses provided arguments for all requests */
    wretch;
    constructor(baseUrl, apiKey, fetch) {
        this.wretch = wretch(baseUrl, { mode: 'cors' })
            .polyfills({
            fetch: fetch ?? globalThis.fetch.bind(this)
        })
            .auth(`Bearer ${apiKey}`)
            .headers({
            'User-Agent': `CNaught-NodeSDK/${version}`
        })
            .errorType('json')
            .catcherFallback((error) => {
            if (!error.json) {
                throw error;
            }
            const problemDetailsObject = error.json;
            const problemDetails = fromObject(problemDetailsObject, mappers);
            throw new CNaughtError(error, problemDetails);
        });
    }
    makeApiGetRequest = (url, requestOptions) => this.wretch
        .headers(this.getHeaders(false, requestOptions))
        .options({
        ...requestOptions?.extraRequestOptions
    })
        .get(url)
        .json();
    makeApiPostRequest = (url, data, requestOptions) => this.wretch
        .headers(this.getHeaders(data !== null, requestOptions))
        .options({
        ...requestOptions?.extraRequestOptions
    })
        .post(data, url)
        .json();
    makeApiPutRequest = (url, data, requestOptions) => this.wretch
        .headers(this.getHeaders(data !== null, requestOptions))
        .options({
        ...requestOptions?.extraRequestOptions
    })
        .put(data, url)
        .json();
    makeApiDeleteRequest = (url, requestOptions) => this.wretch
        .headers(this.getHeaders(false, requestOptions))
        .options({
        ...requestOptions?.extraRequestOptions
    })
        .delete(url)
        .json();
    getHeaders(hasData, requestOptions) {
        const headers = {};
        if (requestOptions?.idempotencyKey) {
            headers['Idempotency-Key'] = requestOptions.idempotencyKey;
        }
        if (hasData) {
            headers['Content-Type'] = 'application/json';
        }
        if (requestOptions?.subaccountId) {
            headers['X-Subaccount-Id'] = requestOptions.subaccountId;
        }
        return {
            ...headers,
            ...requestOptions?.headers
        };
    }
}
//# sourceMappingURL=api-request-handler.js.map