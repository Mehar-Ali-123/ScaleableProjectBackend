import { ProblemDocument } from 'http-problem-details';
type Override<T1, T2> = Omit<T1, keyof T2> & T2;
export declare const invalidParametersProblemType: "https://api.cnaught.com/v1/errors/invalid-parameters";
export type InvalidParametersProblemType = typeof invalidParametersProblemType;
export declare const invalidPaginationProblemType: "https://api.cnaught.com/v1/errors/invalid-pagination";
export type InvalidPaginationProblemType = typeof invalidPaginationProblemType;
export declare const invalidSubaccountProblemType: "https://api.cnaught.com/v1/errors/invalid-subaccount";
export type InvalidSubaccountProblemType = typeof invalidSubaccountProblemType;
export declare const notFoundProblemType: "https://api.cnaught.com/v1/errors/not-found";
export type NotFoundProblemType = typeof notFoundProblemType;
export declare const forbiddenProblemType: "https://api.cnaught.com/v1/errors/forbidden";
export type ForbiddenProblemType = typeof forbiddenProblemType;
export declare const idempotencyChangedPayloadProblemType: "https://api.cnaught.com/v1/errors/idempotency-changed-payload";
export type IdempotencyChangedPayloadProblemType = typeof idempotencyChangedPayloadProblemType;
export declare const idempotencyConcurrentRequestsProblemType: "https://api.cnaught.com/v1/errors/idempotency-concurrent-requests";
export type IdempotencyConcurrentRequestsProblemType = typeof idempotencyConcurrentRequestsProblemType;
export declare const idempotencyKeyTooLongProblemType: "https://api.cnaught.com/v1/errors/idempotency-key-too-long";
export type IdempotencyKeyTooLongProblemType = typeof idempotencyKeyTooLongProblemType;
export type ValidationProblemDetails = Override<ProblemDocument, {
    status: 400;
    type: InvalidParametersProblemType;
    errors: Record<string, string[]>;
}>;
export type InvalidPaginationProblemDetails = Override<ProblemDocument, {
    status: 400;
    type: InvalidSubaccountProblemType;
    detail: string;
}>;
export type InvalidSubaccountProblemDetails = Override<ProblemDocument, {
    status: 400;
    type: InvalidSubaccountProblemType;
}>;
export type NotFoundProblemDetails = Override<ProblemDocument, {
    status: 404;
    type: NotFoundProblemType;
}>;
export type ForbiddenProblemDetails = Override<ProblemDocument, {
    status: 403;
    type: ForbiddenProblemType;
}>;
export type IdempotencyChangedPayloadProblemDetails = Override<ProblemDocument, {
    status: 422;
    type: IdempotencyChangedPayloadProblemType;
}>;
export type IdempotencyConcurrentRequestsProblemDetails = Override<ProblemDocument, {
    status: 409;
    type: IdempotencyConcurrentRequestsProblemType;
}>;
export type IdempotencyKeyTooLongProblemDetails = Override<ProblemDocument, {
    status: 400;
    type: IdempotencyKeyTooLongProblemType;
}>;
export type CNaughtProblemType = NotFoundProblemType | ForbiddenProblemType | InvalidParametersProblemType | InvalidPaginationProblemType | InvalidSubaccountProblemType | IdempotencyKeyTooLongProblemType | IdempotencyChangedPayloadProblemType | IdempotencyConcurrentRequestsProblemType;
export type CNaughtProblemDetails = NotFoundProblemDetails | ForbiddenProblemDetails | ValidationProblemDetails | InvalidPaginationProblemDetails | InvalidSubaccountProblemDetails | IdempotencyKeyTooLongProblemDetails | IdempotencyChangedPayloadProblemDetails | IdempotencyConcurrentRequestsProblemDetails;
export {};
//# sourceMappingURL=CNaughtProblemDetails.d.ts.map